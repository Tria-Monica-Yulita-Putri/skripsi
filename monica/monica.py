# -*- coding: utf-8 -*-
"""Random Forest PART 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NStwVS1Nw0LSO9PsiIHP81KpOryhTq8T
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns


from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score, roc_auc_score 
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.metrics import confusion_matrix

# Fungsi untuk memuat data dari file Excel
def load_data(file):
    data = pd.read_excel(file)
    return data

# Daftar file Excel yang akan diproses
files = ["SMP42.xlsx", "SMP50.xlsx", "SMP25.xlsx", "SMP3.xlsx", "SMP4.xlsx"]

# Memuat data dari setiap file Excel
data_frames = []
for file in files:
    data = load_data(file)
    data_frames.append(data)

# Menggabungkan semua data frame menjadi satu data frame tunggal
data = pd.concat(data_frames, ignore_index=True)

# MENCARI LONGITUDE LATITUDE DISTANCE

# INSTALL GEOPY DAN HAVERSINE
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
from geopy.distance import geodesic

def get_coordinates(address):
    geolocator = Nominatim(user_agent="aplikasi_saya", timeout=10)
    try:
        location = geolocator.geocode(address)
        if location is not None:
            latitude = location.latitude
            longitude = location.longitude
            return latitude, longitude
        else:
            return None, None
    except GeocoderTimedOut:
        return None, None

def calculate_distance(start_latitude, start_longitude, destination_latitude, destination_longitude):
    start_point = (start_latitude, start_longitude)
    destination_point = (destination_latitude, destination_longitude)
    distance = geodesic(start_point, destination_point).kilometers
    return distance

# Memuat data frame
data = pd.DataFrame({
    'rata_rata_mtk': [86, 81],
    'rata_rata_bhs_indo': [82, 81],
    'rata_rata_ipa': [82, 81],
    'alamat_rumah': ['Simorejo No. 1, Surabaya, Indonesia',  'Genting II No. 26, Surabaya, Indonesia'],
    'SMP_Negeri 42': ['Dupak Rukun No. 63, Surabaya, Indonesia', 'Dupak Rukun No. 63, Surabaya, Indonesia'],
    'SMP_Negeri 50': ['sekolahan, sukomanunggal II surabaya, indonesia', 'sekolahan, sukomanunggal II surabaya, indonesia'],
    'SMP_Negeri 25': ['Simo Mulyo No. 25, Surabaya, Indonesia', 'Simo Mulyo No. 25, Surabaya, Indonesia'],
    'SMP_Negeri 3': ['Praban No. 3, Surabaya, Indonesia', 'Praban No. 3, Surabaya, Indonesia'],
    'SMP_Negeri 4': ['Tanjung Anom No. 12, Surabaya, Indonesia', 'Tanjung Anom No. 12, Surabaya, Indonesia']
})

# Mendapatkan koordinat alamat rumah
data[['Start Latitude', 'Start Longitude']] = data['alamat_rumah'].apply(get_coordinates)

# Mendapatkan koordinat SMP 42
data[['Destination Latitude SMP_Negeri 42', 'Destination Longitude SMP_Negeri 42']] = data['SMP_Negeri 42'].apply(lambda x: pd.Series(get_coordinates(x)))

# Mendapatkan koordinat SMP 50
data[['Destination Latitude SMP_Negeri 50', 'Destination Longitude SMP_Negeri 50']] = data['SMP_Negeri 50'].apply(lambda x: pd.Series(get_coordinates(x)))

# Mendapatkan koordinat SMP 25
data[['Destination Latitude SMP_Negeri 25', 'Destination Longitude SMP_Negeri 25']] = data['SMP_Negeri 25'].apply(lambda x: pd.Series(get_coordinates(x)))

# Mendapatkan koordinat SMP 3
data[['Destination Latitude SMP_Negeri 3', 'Destination Longitude SMP_Negeri 3']] = data['SMP_Negeri 3'].apply(lambda x: pd.Series(get_coordinates(x)))

# Mendapatkan koordinat SMP 4
data[['Destination Latitude SMP_Negeri 4', 'Destination Longitude SMP_Negeri 4']] = data['SMP_Negeri 4'].apply(lambda x: pd.Series(get_coordinates(x)))

# Menghitung jarak menggunakan rumus haversine untuk masing-masing SMP
# Menghitung jarak menggunakan rumus haversine untuk masing-masing SMP
data['Distance SMP_Negeri_42'] = data.apply(lambda row: calculate_distance(row['Start Latitude'], row['Start Longitude'], row['Destination Latitude SMP_Negeri 42'], row['Destination Longitude SMP_Negeri 42']), axis=1)
data['Distance SMP_Negeri_50'] = data.apply(lambda row: calculate_distance(row['Start Latitude'], row['Start Longitude'], row['Destination Latitude SMP_Negeri 50'], row['Destination Longitude SMP_Negeri 50']), axis=1)
data['Distance SMP_Negeri_25'] = data.apply(lambda row: calculate_distance(row['Start Latitude'], row['Start Longitude'], row['Destination Latitude SMP_Negeri 25'], row['Destination Longitude SMP_Negeri 25']), axis=1)
data['Distance SMP_Negeri_3'] = data.apply(lambda row: calculate_distance(row['Start Latitude'], row['Start Longitude'], row['Destination Latitude SMP_Negeri 3'], row['Destination Longitude SMP_Negeri 3']), axis=1)
data['Distance SMP_Negeri_4'] = data.apply(lambda row: calculate_distance(row['Start Latitude'], row['Start Longitude'], row['Destination Latitude SMP_Negeri 4'], row['Destination Longitude SMP_Negeri 4']), axis=1)

print(data)

# KLASIFIKASI DAN REKOMENDASI RANDOM FOREST

import joblib

# Pilih Kolom yang relevan
features = ['rata_rata_mtk', 'rata_rata_bhs_indo', 'rata_rata_ipa',
            'jarak_ke_SMP_Negeri_42', 'jarak_ke_SMP_Negeri_50',
            'jarak_ke_SMP_Negeri_25', 'jarak_ke_SMP_Negeri_3', 'jarak_ke_SMP_Negeri_4']
target = 'target'

X = data[features].values
y = data[target].values

# Bagi dataset dan data training
X_Train, X_Test, y_Train, y_Test = train_test_split(X, y, test_size=0.33, random_state=42)

# Melatih model
classifier = RandomForestClassifier(n_estimators=500, criterion='entropy', random_state=0)
classifier.fit(X_Train, y_Train)

# Menyimpan model ke file
joblib.dump(classifier, "cl_randomforest.joblib")

# Memuat model dari file untuk di WEB STREAMLITNYA
classifier = joblib.load("cl_randomforest.joblib")

# website streamlit
import streamlit as st

# Membaca input dari pengguna
rata_rata_mtk = st.number_input('Input nilai rata_rata_mtk:', min_value=0.1, max_value=100.0, value=1.0)
rata_rata_bhs_indo = st.number_input('Input nilai rata_rata_bhs_indo:', min_value=0.1, max_value=100.0, value=1.0)
rata_rata_ipa = st.number_input('Input nilai rata_rata_ipa:', min_value=0.1, max_value=100.0, value=1.0)
alamat_rumah = st.text_input('Input Alamat Rumah:')

def predicted_smpnegeri(rata_rata_mtk, rata_rata_bhs_indo, rata_rata_ipa, alamat_rumah, data):
    # Mengubah alamat rumah menjadi koordinat latitude dan longitude
    latitude_rumah, longitude_rumah = get_coordinates(alamat_rumah)

    # Menghitung jarak rumah ke setiap SMP_Negeri menggunakan rumus haversine
    jarak_ke_smp = [
    calculate_distance(latitude_rumah, longitude_rumah, data['Start Latitude'][0], data['Start Longitude'][0]),
    calculate_distance(latitude_rumah, longitude_rumah, data['Destination Latitude SMP_Negeri 42'][0], data['Destination Longitude SMP_Negeri 42'][0]),
    calculate_distance(latitude_rumah, longitude_rumah, data['Destination Latitude SMP_Negeri 50'][0], data['Destination Longitude SMP_Negeri 50'][0]),
    calculate_distance(latitude_rumah, longitude_rumah, data['Destination Latitude SMP_Negeri 25'][0], data['Destination Longitude SMP_Negeri 25'][0]),
    calculate_distance(latitude_rumah, longitude_rumah, data['Destination Latitude SMP_Negeri 3'][0], data['Destination Longitude SMP_Negeri 3'][0]),
    calculate_distance(latitude_rumah, longitude_rumah, data['Destination Latitude SMP_Negeri 4'][0], data['Destination Longitude SMP_Negeri 4'][0])
]

    # Mengubah input menjadi DataFrame yang sesuai dengan format data training
    X = pd.DataFrame({
        'rata_rata_mtk': [rata_rata_mtk],
        'rata_rata_bhs_indo': [rata_rata_bhs_indo],
        'rata_rata_ipa': [rata_rata_ipa],
        'jarak_ke_SMP_Negeri_42': [jarak_ke_smp[1]],
        'jarak_ke_SMP_Negeri_50': [jarak_ke_smp[2]],
        'jarak_ke_SMP_Negeri_25': [jarak_ke_smp[3]],
        'jarak_ke_SMP_Negeri_3': [jarak_ke_smp[4]],
        'jarak_ke_SMP_Negeri_4': [jarak_ke_smp[5]]
    })

    # Melakukan prediksi menggunakan model Random Forest
    prediction = classifier.predict(X)

    # Mengembalikan hasil prediksi
    return prediction

def main():
    st.title("SISTEM REKOMENDASI SMP NEGERI BERDASARKAN NILAI RAPORT SD DENGAN RANDOM FOREST")
    st.image("logo-sticky.png")
    st.write("Masukkan data yang diperlukan:")
    
    # Membaca data
    data = load_data("DATA_TA_FIX_2.xlsx")

    # Tombol Rekomendasi
    if st.button('Rekomendasi'):
        # Memanggil fungsi predicted_smpnegeri untuk melakukan prediksi
        prediction = predicted_smpnegeri(rata_rata_mtk, rata_rata_bhs_indo, rata_rata_ipa, alamat_rumah, data)
        st.write("Rekomendasi Sekolah SMP Negeri yang dapat siswa pilih:")
        st.write(prediction)

if __name__ == "__main__":
    main()
